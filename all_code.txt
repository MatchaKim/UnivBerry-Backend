/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.Properties;

public class MavenWrapperDownloader {

    /**
     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
     */
    private static final String DEFAULT_DOWNLOAD_URL =
            "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar";

    /**
     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to
     * use instead of the default one.
     */
    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =
            ".mvn/wrapper/maven-wrapper.properties";

    /**
     * Path where the maven-wrapper.jar will be saved to.
     */
    private static final String MAVEN_WRAPPER_JAR_PATH =
            ".mvn/wrapper/maven-wrapper.jar";

    /**
     * Name of the property which should be used to override the default download url for the wrapper.
     */
    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";

    public static void main(String args[]) {
        System.out.println("- Downloader started");
        File baseDirectory = new File(args[0]);
        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if(mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
            } finally {
                try {
                    if(mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println("- Downloading from: : " + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if(!outputFile.getParentFile().exists()) {
            if(!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");
            }
        }
        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println("Done");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println("- Error downloading");
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

}
package com.bezkoder.springjwt;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class SpringBootSecurityJwtApplicationTests {

	@Test
	public void contextLoads() {
	}

}
package com.bezkoder.springjwt.auth.repository;

import com.bezkoder.springjwt.auth.models.Role;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.bezkoder.springjwt.auth.models.ERole;

@Component
public class RoleDataLoader implements CommandLineRunner {

    @Autowired
    RoleRepository roleRepository;

    @Override
    public void run(String... args) throws Exception {
        if (roleRepository.findByName(ERole.ROLE_USER).isEmpty()) {
            roleRepository.save(new Role(ERole.ROLE_USER));
        }
        if (roleRepository.findByName(ERole.ROLE_ADMIN).isEmpty()) {
            roleRepository.save(new Role(ERole.ROLE_ADMIN));
        }
        if (roleRepository.findByName(ERole.ROLE_MODERATOR).isEmpty()) {
            roleRepository.save(new Role(ERole.ROLE_MODERATOR));
        }
    }
}
package com.bezkoder.springjwt.auth.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.bezkoder.springjwt.auth.models.ERole;
import com.bezkoder.springjwt.auth.models.Role;

@Repository
public interface RoleRepository extends JpaRepository<Role, Long> {
  Optional<Role> findByName(ERole name);
}
package com.bezkoder.springjwt.auth.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.bezkoder.springjwt.auth.models.User;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
  Optional<User> findByUsername(String username);

  Boolean existsByUsername(String username);

  Boolean existsByEmail(String email);
}
package com.bezkoder.springjwt.auth.security.jwt;

import java.security.Key;
import java.util.Date;

import com.bezkoder.springjwt.auth.security.services.UserDetailsImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.*;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtils {
  private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);

  @Value("${bezkoder.app.jwtSecret}")
  private String jwtSecret;

  @Value("${bezkoder.app.jwtExpirationMs}")
  private int jwtExpirationMs;

  public String generateJwtToken(Authentication authentication) {

    UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();

    return Jwts.builder()
        .setSubject((userPrincipal.getUsername()))
        .setIssuedAt(new Date())
        .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))
        .signWith(key(), SignatureAlgorithm.HS256)
        .compact();
  }
  
  private Key key() {
    return Keys.hmacShaKeyFor(Decoders.BASE64.decode(jwtSecret));
  }

  public String getUserNameFromJwtToken(String token) {
    return Jwts.parserBuilder().setSigningKey(key()).build()
               .parseClaimsJws(token).getBody().getSubject();
  }

  public boolean validateJwtToken(String authToken) {
    try {
      Jwts.parserBuilder().setSigningKey(key()).build().parse(authToken);
      return true;
    } catch (MalformedJwtException e) {
      logger.error("Invalid JWT token: {}", e.getMessage());
    } catch (ExpiredJwtException e) {
      logger.error("JWT token is expired: {}", e.getMessage());
    } catch (UnsupportedJwtException e) {
      logger.error("JWT token is unsupported: {}", e.getMessage());
    } catch (IllegalArgumentException e) {
      logger.error("JWT claims string is empty: {}", e.getMessage());
    }

    return false;
  }
}
package com.bezkoder.springjwt.auth.security.jwt;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.databind.ObjectMapper;

@Component
public class AuthEntryPointJwt implements AuthenticationEntryPoint {

  private static final Logger logger = LoggerFactory.getLogger(AuthEntryPointJwt.class);

  @Override
  public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)
      throws IOException, ServletException {
    logger.error("Unauthorized error: {}", authException.getMessage());

    response.setContentType(MediaType.APPLICATION_JSON_VALUE);
    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);

    final Map<String, Object> body = new HashMap<>();
    body.put("status", HttpServletResponse.SC_UNAUTHORIZED);
    body.put("error", "Unauthorized");
    body.put("message", authException.getMessage());
    body.put("path", request.getServletPath());

    final ObjectMapper mapper = new ObjectMapper();
    mapper.writeValue(response.getOutputStream(), body);
  }

}
package com.bezkoder.springjwt.auth.security.jwt;

import java.io.IOException;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import com.bezkoder.springjwt.auth.security.services.UserDetailsServiceImpl;

public class AuthTokenFilter extends OncePerRequestFilter {
  @Autowired
  private JwtUtils jwtUtils;

  @Autowired
  private UserDetailsServiceImpl userDetailsService;

  private static final Logger logger = LoggerFactory.getLogger(AuthTokenFilter.class);

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    try {
      String jwt = parseJwt(request);
      if (jwt != null && jwtUtils.validateJwtToken(jwt)) {
        String username = jwtUtils.getUserNameFromJwtToken(jwt);

        UserDetails userDetails = userDetailsService.loadUserByUsername(username);
        UsernamePasswordAuthenticationToken authentication =
            new UsernamePasswordAuthenticationToken(
                userDetails,
                null,
                userDetails.getAuthorities());
        authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

        SecurityContextHolder.getContext().setAuthentication(authentication);
      }
    } catch (Exception e) {
      logger.error("Cannot set user authentication: {}", e);
    }

    filterChain.doFilter(request, response);
  }

  private String parseJwt(HttpServletRequest request) {
    String headerAuth = request.getHeader("Authorization");

    if (StringUtils.hasText(headerAuth) && headerAuth.startsWith("Bearer ")) {
      return headerAuth.substring(7);
    }

    return null;
  }
}
package com.bezkoder.springjwt.auth.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
//import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.bezkoder.springjwt.auth.security.jwt.AuthEntryPointJwt;
import com.bezkoder.springjwt.auth.security.jwt.AuthTokenFilter;
import com.bezkoder.springjwt.auth.security.services.UserDetailsServiceImpl;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

@Configuration
@EnableMethodSecurity
// (securedEnabled = true,
// jsr250Enabled = true,
// prePostEnabled = true) // by default
public class WebSecurityConfig { // extends WebSecurityConfigurerAdapter {
  @Autowired
  UserDetailsServiceImpl userDetailsService;

  @Autowired
  private AuthEntryPointJwt unauthorizedHandler;

  @Bean
  public AuthTokenFilter authenticationJwtTokenFilter() {
    return new AuthTokenFilter();
  }

//  @Override
//  public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
//    authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
//  }
  
  @Bean
  public DaoAuthenticationProvider authenticationProvider() {
      DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
       
      authProvider.setUserDetailsService(userDetailsService);
      authProvider.setPasswordEncoder(passwordEncoder());
   
      return authProvider;
  }

//  @Bean
//  @Override
//  public AuthenticationManager authenticationManagerBean() throws Exception {
//    return super.authenticationManagerBean();
//  }
  
  @Bean
  public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
    return authConfig.getAuthenticationManager();
  }

  @Bean
  public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
  }

//  @Override
//  protected void configure(HttpSecurity http) throws Exception {
//    http.cors().and().csrf().disable()
//      .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()
//      .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
//      .authorizeRequests().antMatchers("/api/auth/**").permitAll()
//      .antMatchers("/api/test/**").permitAll()
//      .anyRequest().authenticated();
//
//    http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
//  }

  @Bean
  public CorsConfigurationSource corsConfigurationSource() {
    CorsConfiguration config = new CorsConfiguration();

    config.setAllowCredentials(true);
    config.setAllowedOriginPatterns(List.of("*"));
    config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"));
    config.setAllowedHeaders(List.of("*"));
    config.setExposedHeaders(List.of("*"));

    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration("/**", config);
    return source;
  }
  
  @Bean
  public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    http.csrf(csrf -> csrf.disable())
            .cors(Customizer.withDefaults())
        .exceptionHandling(exception -> exception.authenticationEntryPoint(unauthorizedHandler))
        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth ->
                    auth.anyRequest().permitAll() // 모든 요청에 대해 접근 허용
            );
    
    http.authenticationProvider(authenticationProvider());

    http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
    
    return http.build();
  }
}
package com.bezkoder.springjwt.auth.security.services;

import com.bezkoder.springjwt.auth.models.User;
import com.bezkoder.springjwt.auth.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {
  @Autowired
  UserRepository userRepository;

  @Override
  @Transactional
  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
    User user = userRepository.findByUsername(username)
        .orElseThrow(() -> new UsernameNotFoundException("User Not Found with username: " + username));

    return UserDetailsImpl.build(user);
  }

}
package com.bezkoder.springjwt.auth.security.services;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.bezkoder.springjwt.auth.models.User;
import com.fasterxml.jackson.annotation.JsonIgnore;

public class UserDetailsImpl implements UserDetails {
  private static final long serialVersionUID = 1L;

  private Long id;

  private String username;

  private String email;

  @JsonIgnore
  private String password;

  private Collection<? extends GrantedAuthority> authorities;

  public UserDetailsImpl(Long id, String username, String email, String password,
      Collection<? extends GrantedAuthority> authorities) {
    this.id = id;
    this.username = username;
    this.email = email;
    this.password = password;
    this.authorities = authorities;
  }

  public static UserDetailsImpl build(User user) {
    List<GrantedAuthority> authorities = user.getRoles().stream()
        .map(role -> new SimpleGrantedAuthority(role.getName().name()))
        .collect(Collectors.toList());

    return new UserDetailsImpl(
        user.getId(), 
        user.getUsername(), 
        user.getEmail(),
        user.getPassword(), 
        authorities);
  }

  @Override
  public Collection<? extends GrantedAuthority> getAuthorities() {
    return authorities;
  }

  public Long getId() {
    return id;
  }

  public String getEmail() {
    return email;
  }

  @Override
  public String getPassword() {
    return password;
  }

  @Override
  public String getUsername() {
    return username;
  }

  @Override
  public boolean isAccountNonExpired() {
    return true;
  }

  @Override
  public boolean isAccountNonLocked() {
    return true;
  }

  @Override
  public boolean isCredentialsNonExpired() {
    return true;
  }

  @Override
  public boolean isEnabled() {
    return true;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;
    UserDetailsImpl user = (UserDetailsImpl) o;
    return Objects.equals(id, user.id);
  }
}
package com.bezkoder.springjwt.auth.payload.response;

public class MessageResponse {
  private String message;

  public MessageResponse(String message) {
    this.message = message;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }
}
package com.bezkoder.springjwt.auth.payload.response;

import java.util.List;

public class JwtResponse {
  private String token;
  private String type = "Bearer";
  private Long id;
  private String username;
  private String email;
  private List<String> roles;

  public JwtResponse(String accessToken, Long id, String username, String email, List<String> roles) {
    this.token = accessToken;
    this.id = id;
    this.username = username;
    this.email = email;
    this.roles = roles;
  }

  public String getAccessToken() {
    return token;
  }

  public void setAccessToken(String accessToken) {
    this.token = accessToken;
  }

  public String getTokenType() {
    return type;
  }

  public void setTokenType(String tokenType) {
    this.type = tokenType;
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public List<String> getRoles() {
    return roles;
  }
}
package com.bezkoder.springjwt.auth.payload.request;

import java.util.Set;

import jakarta.validation.constraints.*;

public class SignupRequest {
  @NotBlank
  @Size(min = 3, max = 20)
  private String username;

  @NotBlank
  @Size(max = 50)
  @Email
  private String email;

  private Set<String> role;

  @NotBlank
  @Size(min = 6, max = 40)
  private String password;

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Set<String> getRole() {
    return this.role;
  }

  public void setRole(Set<String> role) {
    this.role = role;
  }
}
package com.bezkoder.springjwt.auth.payload.request;

import jakarta.validation.constraints.NotBlank;

public class LoginRequest {
	@NotBlank
  private String username;

	@NotBlank
	private String password;

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
}
package com.bezkoder.springjwt.auth.models;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import com.bezkoder.springjwt.product.entity.CertificationGroup;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "users",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = "username"),
                @UniqueConstraint(columnNames = "email")
        })
public class User {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @NotBlank
  @Size(max = 20)
  private String username;

  @NotBlank
  @Size(max = 50)
  @Email
  private String email;

  @NotBlank
  @Size(max = 120)
  private String password;

  @NotBlank
  @Size(max = 120)
  private String secretKey;

  @ManyToMany(fetch = FetchType.LAZY)
  @JoinTable(  name = "user_roles",
          joinColumns = @JoinColumn(name = "user_id"),
          inverseJoinColumns = @JoinColumn(name = "role_id"))
  private Set<Role> roles = new HashSet<>();

  @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
  @JsonManagedReference
  private List<CertificationGroup> certificationGroups;

  public User() {
  }

  public User(String username, String email, String password) {
    this.username = username;
    this.email = email;
    this.password = password;
  }

  @PrePersist
  protected void onCreate() {
    if (this.secretKey == null) {
      this.secretKey = UUID.randomUUID().toString();
    }
  }

  public void setSecretKey(String secretKey) {
    this.secretKey = secretKey;
  }


  public String getSecretKey() {
    return secretKey;
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Set<Role> getRoles() {
    return roles;
  }

  public void setRoles(Set<Role> roles) {
    this.roles = roles;
  }

  public List<CertificationGroup> getCertificationGroups() {
    return certificationGroups;
  }

  public void setCertificationGroups(List<CertificationGroup> certificationGroups) {
    this.certificationGroups = certificationGroups;
  }
}
package com.bezkoder.springjwt.auth.models;

public enum ERole {
  ROLE_USER,
  ROLE_MODERATOR,
  ROLE_ADMIN
}
package com.bezkoder.springjwt.auth.models;

import jakarta.persistence.*;

@Entity
@Table(name = "roles")
public class Role {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Integer id;

  @Enumerated(EnumType.STRING)
  @Column(length = 20)
  private ERole name;

  public Role() {

  }

  public Role(ERole name) {
    this.name = name;
  }

  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ERole getName() {
    return name;
  }

  public void setName(ERole name) {
    this.name = name;
  }
}package com.bezkoder.springjwt.auth.controllers;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import com.bezkoder.springjwt.auth.repository.RoleRepository;
import com.bezkoder.springjwt.auth.repository.UserRepository;
import com.bezkoder.springjwt.auth.security.services.UserDetailsImpl;
import jakarta.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bezkoder.springjwt.auth.models.ERole;
import com.bezkoder.springjwt.auth.models.Role;
import com.bezkoder.springjwt.auth.models.User;
import com.bezkoder.springjwt.auth.payload.request.LoginRequest;
import com.bezkoder.springjwt.auth.payload.request.SignupRequest;
import com.bezkoder.springjwt.auth.payload.response.JwtResponse;
import com.bezkoder.springjwt.auth.payload.response.MessageResponse;
import com.bezkoder.springjwt.auth.security.jwt.JwtUtils;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/auth")
public class AuthController {
  @Autowired
  AuthenticationManager authenticationManager;

  @Autowired
  UserRepository userRepository;

  @Autowired
  RoleRepository roleRepository;

  @Autowired
  PasswordEncoder encoder;

  @Autowired
  JwtUtils jwtUtils;

  @PostMapping("/signin")
  public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {

    Authentication authentication = authenticationManager.authenticate(
        new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));

    SecurityContextHolder.getContext().setAuthentication(authentication);
    String jwt = jwtUtils.generateJwtToken(authentication);
    
    UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
    List<String> roles = userDetails.getAuthorities().stream()
        .map(item -> item.getAuthority())
        .collect(Collectors.toList());

    return ResponseEntity.ok(new JwtResponse(jwt, 
                         userDetails.getId(), 
                         userDetails.getUsername(), 
                         userDetails.getEmail(), 
                         roles));
  }

  @PostMapping("/signup")
  public ResponseEntity<?> registerUser(@RequestBody SignupRequest signUpRequest) {
    System.out.println("==========이메일=========="+signUpRequest.getEmail());

    if (userRepository.existsByUsername(signUpRequest.getUsername())) {
      return ResponseEntity
              .badRequest()
              .body(new MessageResponse("Error: Username is already taken!"));
    }

    if (userRepository.existsByEmail(signUpRequest.getEmail())) {
      return ResponseEntity
              .badRequest()
              .body(new MessageResponse("Error: Email is already in use!"));
    }

    // Create new user's account
    User user = new User(signUpRequest.getUsername(),
            signUpRequest.getEmail(),
            encoder.encode(signUpRequest.getPassword()));

    Set<String> strRoles = signUpRequest.getRole();
    Set<Role> roles = new HashSet<>();

    if (strRoles == null || strRoles.isEmpty()) {
      Role userRole = roleRepository.findByName(ERole.ROLE_USER)
              .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
      roles.add(userRole);
    } else {
      strRoles.forEach(role -> {
        switch (role) {
          case "admin":
            Role adminRole = roleRepository.findByName(ERole.ROLE_ADMIN)
                    .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
            roles.add(adminRole);
            break;
          case "mod":
            Role modRole = roleRepository.findByName(ERole.ROLE_MODERATOR)
                    .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
            roles.add(modRole);
            break;
          default:
            Role userRole = roleRepository.findByName(ERole.ROLE_USER)
                    .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
            roles.add(userRole);
        }
      });
    }

    user.setRoles(roles);

    user.setSecretKey(UUID.randomUUID().toString());
    userRepository.save(user);

    return ResponseEntity.ok(new MessageResponse("User registered successfully!"));
  }

}
package com.bezkoder.springjwt.auth.controllers;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/test")
public class TestController {
  @GetMapping("/all")
  public String allAccess() {
    return "Public Content.";
  }

  @GetMapping("/user")
  @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
  public String userAccess() {
    return "User Content.";
  }

  @GetMapping("/mod")
  @PreAuthorize("hasRole('MODERATOR')")
  public String moderatorAccess() {
    return "Moderator Board.";
  }

  @GetMapping("/admin")
  @PreAuthorize("hasRole('ADMIN')")
  public String adminAccess() {
    return "Admin Board.";
  }
}
package com.bezkoder.springjwt.product.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class ProductUserResponse {

    private String email;

    private boolean verified;

    private boolean isEmailExisting;

}
package com.bezkoder.springjwt.product.dto;

import lombok.Data;
import lombok.Getter;

@Data
public class CertificationGroupRequest {
    private String forceEmail;
}
package com.bezkoder.springjwt.product.dto;

import lombok.Data;

@Data
public class ProductUserRequest {
    private String email;
}
package com.bezkoder.springjwt.product.repository;

import com.bezkoder.springjwt.product.entity.ProductUser;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ProductUserRepository extends JpaRepository<ProductUser, String> {
}
package com.bezkoder.springjwt.product.repository;

import com.bezkoder.springjwt.auth.models.User;
import com.bezkoder.springjwt.auth.repository.UserRepository;
import com.bezkoder.springjwt.product.dto.CertificationGroupRequest;
import com.bezkoder.springjwt.product.dto.ProductUserRequest;
import com.bezkoder.springjwt.product.entity.CertificationGroup;
import com.bezkoder.springjwt.product.entity.ProductUser;
import com.bezkoder.springjwt.product.service.CertificationGroupService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class DataLoader implements CommandLineRunner {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CertificationGroupService certificationGroupService;

    @Autowired
    private ProductUserRepository productUserRepository;

    @Override
    public void run(String... args) throws Exception {
        // 예제 사용자 생성
        User user = new User("username", "user@example.com", "password");
        userRepository.save(user);

        // 예제 인증 그룹 생성
        CertificationGroupRequest groupRequest1 = new CertificationGroupRequest();
        groupRequest1.setForceEmail("example.com");
        CertificationGroup group1 = certificationGroupService.createCertificationGroup(user.getUsername(), groupRequest1);

        CertificationGroupRequest groupRequest2 = new CertificationGroupRequest();
        groupRequest2.setForceEmail("this.com");
        CertificationGroup group2 = certificationGroupService.createCertificationGroup(user.getUsername(), groupRequest2);

        // 예제 인증 그룹에 ProductUser 추가
        addProductUserToGroup(group1, "productuser1@example.com");
        addProductUserToGroup(group1, "productuser2@example.com");
        addProductUserToGroup(group2, "productuser3@example.com");
    }

    private void addProductUserToGroup(CertificationGroup group, String email) {
        ProductUserRequest productUserRequest = new ProductUserRequest();
        productUserRequest.setEmail(email);
        ProductUser productUser = new ProductUser();
        productUser.setEmail(productUserRequest.getEmail());
        productUser.setVerified(false);
        productUser.setCertificationGroup(group);
        productUserRepository.save(productUser);
    }
}
package com.bezkoder.springjwt.product.repository;

import com.bezkoder.springjwt.product.entity.CertificationGroup;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface CertificationGroupRepository extends JpaRepository<CertificationGroup, Long> {
    List<CertificationGroup> findByUserId(Long userId);
    Optional<CertificationGroup> findByIdAndUserId(Long id, Long userId);
    boolean existsByUser_UsernameAndForceEmail(String username, String forceEmail);
}
package com.bezkoder.springjwt.product.repository;

import com.bezkoder.springjwt.product.entity.University;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface UniversityRepository extends JpaRepository<University, Long> {
    List<University> findByNameContainingIgnoreCase(String name);
}
package com.bezkoder.springjwt.product.repository;

import com.bezkoder.springjwt.auth.models.User;
import com.bezkoder.springjwt.auth.repository.UserRepository;
import com.bezkoder.springjwt.product.dto.CertificationGroupRequest;
import com.bezkoder.springjwt.product.dto.ProductUserRequest;
import com.bezkoder.springjwt.product.entity.CertificationGroup;
import com.bezkoder.springjwt.product.entity.ProductUser;
import com.bezkoder.springjwt.product.entity.University;
import com.bezkoder.springjwt.product.service.CertificationGroupService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.List;

@Component
public class UniversityDataLoader implements CommandLineRunner {

    @Autowired
        private UniversityRepository universityRepository;

        @Override
        public void run(String... args) throws Exception {
            List<University> universities = Arrays.asList(
                    new University("가천길대학", "gachon.ac.kr"),
                    new University("가톨릭상지대학교", "csj.ac.kr"),
                    new University("강동대학교", "gangdong.ac.kr"),
                    new University("강릉영동대학교", "gyc.ac.kr"),
                    new University("강원관광대학", "kt.ac.kr"),
                    new University("강원도립대학", "gw.ac.kr"),
                    new University("거제대학교", "koje.ac.kr"),
                    new University("경기과학기술대학교", "gtec.ac.kr"),
                    new University("경남도립거창대학", "gc.ac.kr"),
                    new University("경남도립남해대학", "namhae.ac.kr"),
                    new University("경남정보대학교", "kit.ac.kr"),
                    new University("경민대학교", "kyungmin.ac.kr"),
                    new University("경복대학교", "kbu.ac.kr"),
                    new University("경북과학대학교", "kbsc.ac.kr"),
                    new University("경북도립대학교", "gpc.ac.kr"),
                    new University("경북전문대학교", "kbc.ac.kr"),
                    new University("경산1대학교", "gs.ac.kr"),
                    new University("경원전문대학", "kwc.ac.kr"),
                    new University("경인여자대학교", "kic.ac.kr"),
                    new University("계명문화대학교", "kmcu.ac.kr"),
                    new University("계원예술대학교", "kaywon.ac.kr"),
                    new University("고구려대학교", "kgrc.ac.kr"),
                    new University("광양보건대학교", "kwangyang.ac.kr"),
                    new University("광주보건대학교", "ghu.ac.kr"),
                    new University("구미대학교", "gumi.ac.kr"),
                    new University("구세군사관학교", "saotc.ac.kr"),
                    new University("국제대학교", "kookje.ac.kr"),
                    new University("군산간호대학교", "kcn.ac.kr"),
                    new University("군장대학교", "kunjang.ac.kr"),
                    new University("기독간호대학교", "ccn.ac.kr"),
                    new University("김천과학대학", "kcs.ac.kr"),
                    new University("김천대학", "gimcheon.ac.kr"),
                    new University("김포대학교", "kimpo.ac.kr"),
                    new University("김해대학교", "gimhae.ac.kr"),
                    new University("농협대학교", "nonghyup.ac.kr"),
                    new University("대경대학교", "tk.ac.kr"),
                    new University("대구공업대학교", "ttc.ac.kr"),
                    new University("대구과학대학교", "tsu.ac.kr"),
                    new University("대구미래대학교", "dfc.ac.kr"),
                    new University("대구보건대학교", "dhc.ac.kr"),
                    new University("대덕대학교", "ddu.ac.kr"),
                    new University("대동대학교", "daedong.ac.kr"),
                    new University("대림대학교", "daelim.ac.kr"),
                    new University("대원대학교", "daewon.ac.kr"),
                    new University("대전보건대학교", "hit.ac.kr"),
                    new University("동강대학교", "dkc.ac.kr"),
                    new University("동남보건대학교", "dongnam.ac.kr"),
                    new University("동명대학", "tu.ac.kr"),
                    new University("동부산대학교", "dpc.ac.kr"),
                    new University("동서울대학교", "dsc.ac.kr"),
                    new University("동아방송예술대학교", "dima.ac.kr"),
                    new University("동아인재대학교", "dongac.ac.kr"),
                    new University("동양미래대학교", "dongyang.ac.kr"),
                    new University("동우대학", "duc.ac.kr"),
                    new University("동원과학기술대학교", "dist.ac.kr"),
                    new University("동원대학교", "tw.ac.kr"),
                    new University("동의과학대학교", "dit.ac.kr"),
                    new University("동주대학교", "dongju.ac.kr"),
                    new University("두원공과대학교", "doowon.ac.kr"),
                    new University("마산대학교", "masan.ac.kr"),
                    new University("명지전문대학", "mjc.ac.kr"),
                    new University("목포과학대학교", "mokpo-c.ac.kr"),
                    new University("문경대학교", "mkc.ac.kr"),
                    new University("배화여자대학교", "baewha.ac.kr"),
                    new University("백석문화대학교", "bscu.ac.kr"),
                    new University("백제예술대학교", "paekche.ac.kr"),
                    new University("벽성대학", "bs.ac.kr"),
                    new University("부산경상대학교", "bsks.ac.kr"),
                    new University("부산과학기술대학교", "bist.ac.kr"),
                    new University("부산여자대학교", "bwc.ac.kr"),
                    new University("부산예술대학교", "busanarts.ac.kr"),
                    new University("부천대학교", "bc.ac.kr"),
                    new University("삼육보건대학", "shu.ac.kr"),
                    new University("삼육의명대학", "syu.ac.kr"),
                    new University("상지영서대학교", "sy.ac.kr"),
                    new University("서라벌대학교", "sorabol.ac.kr"),
                    new University("서영대학교", "seoyeong.ac.kr"),
                    new University("서울보건대학", "shjc.ac.kr"),
                    new University("서울여자간호대학교", "snjc.ac.kr"),
                    new University("서울예술대학교", "seoularts.ac.kr"),
                    new University("서일대학교", "seoil.ac.kr"),
                    new University("서정대학교", "seojeong.ac.kr"),
                    new University("서해대학", "sohae.ac.kr"),
                    new University("선린대학교", "sunlin.ac.kr"),
                    new University("성덕대학교", "sdc.ac.kr"),
                    new University("성심외국어대학", "sungsim.ac.kr"),
                    new University("세경대학교", "saekyung.ac.kr"),
                    new University("송곡대학교", "songgok.ac.kr"),
                    new University("송원대학", "songwon.ac.kr"),
                    new University("송호대학교", "songho.ac.kr"),
                    new University("수성대학교", "sc.ac.kr"),
                    new University("수원과학대학교", "ssc.ac.kr"),
                    new University("수원여자대학교", "swc.ac.kr"),
                    new University("순천제일대학", "suncheon.ac.kr"),
                    new University("숭의여자대학교", "sewc.ac.kr"),
                    new University("신구대학교", "shingu.ac.kr"),
                    new University("신성대학교", "shinsung.ac.kr"),
                    new University("신안산대학교", "sau.ac.kr"),
                    new University("신흥대학교", "shc.ac.kr"),
                    new University("아주자동차대학", "motor.ac.kr"),
                    new University("안동과학대학교", "asc.ac.kr"),
                    new University("안산대학교", "ansan.ac.kr"),
                    new University("여주대학교", "yit.ac.kr"),
                    new University("연성대학교", "yeonsung.ac.kr"),
                    new University("연암공과대학교", "yc.ac.kr"),
                    new University("영남외국어대학", "yflc.ac.kr"),
                    new University("영남이공대학교", "ync.ac.kr"),
                    new University("영진사이버대학", "ycc.ac.kr"),
                    new University("영진전문대학", "yjc.ac.kr"),
                    new University("오산대학교", "osan.ac.kr"),
                    new University("용인송담대학교", "ysc.ac.kr"),
                    new University("우송공업대학", "wst.ac.kr"),
                    new University("우송정보대학", "wsi.ac.kr"),
                    new University("울산과학대학교", "uc.ac.kr"),
                    new University("웅지세무대학", "wat.ac.kr"),
                    new University("원광보건대학교", "wkhc.ac.kr"),
                    new University("원주대학", "wonju.ac.kr"),
                    new University("유한대학교", "yuhan.ac.kr"),
                    new University("인덕대학교", "induk.ac.kr"),
                    new University("인천재능대학교", "jeiu.ac.kr"),
                    new University("인천전문대학", "icc.ac.kr"),
                    new University("인하공업전문대학", "itc.ac.kr"),
                    new University("장안대학교", "jangan.ac.kr"),
                    new University("적십자간호대학", "cau.ac.kr"),
                    new University("전남과학대학교", "chunnam-c.ac.kr"),
                    new University("전남도립대학교", "dorip.ac.kr"),
                    new University("전북과학대학교", "jbsc.ac.kr"),
                    new University("전주기전대학", "jk.ac.kr"),
                    new University("전주비전대학교", "jvision.ac.kr"),
                    new University("제주관광대학교", "ctc.ac.kr"),
                    new University("제주산업정보대학", "jeju.ac.kr"),
                    new University("제주한라대학교", "chu.ac.kr"),
                    new University("조선간호대학교", "cnc.ac.kr"),
                    new University("조선이공대학교", "cst.ac.kr"),
                    new University("진주보건대학교", "jhc.ac.kr"),
                    new University("창신대학", "csc.ac.kr"),
                    new University("창원문성대학", "cmu.ac.kr"),
                    new University("천안연암대학", "yonam.ac.kr"),
                    new University("청강문화산업대학교", "chungkang.academy"),
                    new University("청암대학교", "scjc.ac.kr"),
                    new University("춘해보건대학교", "ch.ac.kr"),
                    new University("충남도립청양대학", "cyc.ac.kr"),
                    new University("충북도립대학", "cpu.ac.kr"),
                    new University("충북보건과학대학교", "chsu.ac.kr"),
                    new University("충청대학교", "ok.ac.kr"),
                    new University("포항대학교", "pohang.ac.kr"),
                    new University("한국골프대학", "kg.ac.kr"),
                    new University("한국관광대학교", "ktc.ac.kr"),
                    new University("한국농수산대학", "af.ac.kr"),
                    new University("한국복지대학교", "hanrw.ac.kr"),
                    new University("한국복지사이버대학", "corea.ac.kr"),
                    new University("한국승강기대학교", "klc.ac.kr"),
                    new University("한국영상대학교", "pro.ac.kr"),
                    new University("한국정보통신기능대학", "icpc.ac.kr"),
                    new University("한국철도대학", "krc.ac.kr"),
                    new University("한국폴리텍 I 대학 서울강서캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 I 대학 서울정수캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 I 대학 성남캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 II 대학 남인천캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 II 대학 인천캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 III 대학 강릉캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 III 대학 춘천캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 IV 대학 대전캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 IV 대학 아산캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 IV 대학 청주캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 IV 대학 홍성캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 V 대학 고창캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 V 대학 김제캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 V 대학 목포캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 V 대학 익산캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 VI 대학 대구캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 VII 대학 부산캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 VII 대학 울산캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍 VII 대학 창원캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍VI대학 구미캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍V대학 광주캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍대학 바이오캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍대학 섬유패션캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍대학 안성여자캠퍼스", "kopo.ac.kr"),
                    new University("한국폴리텍대학 항공캠퍼스", "kopo.ac.kr"),
                    new University("한림성심대학교", "hsc.ac.kr"),
                    new University("한양여자대학교", "hywoman.ac.kr"),
                    new University("한영대학", "hanyeong.ac.kr"),
                    new University("혜전대학", "hj.ac.kr"),
                    new University("혜천대학교", "hu.ac.kr"),
                    new University("가야대학교", "kaya.ac.kr"),
                    new University("가천대학교", "gachon.ac.kr"),
                    new University("가천의과학대학교", "gachon.ac.kr"),
                    new University("가톨릭대학교", "catholic.ac.kr"),
                    new University("감리교신학대학교", "mtu.ac.kr"),
                    new University("강남대학교", "kangnam.ac.kr"),
                    new University("강릉원주대학교", "gwnu.ac.kr"),
                    new University("강원대학교", "kangwon.ac.kr"),
                    new University("건국대학교", "konkuk.ac.kr"),
                    new University("건국대학교(글로컬)", "kku.ac.kr"),
                    new University("건양대학교", "konyang.ac.kr"),
                    new University("건양사이버대학교", "kycu.ac.kr"),
                    new University("경기대학교", "kyonggi.ac.kr"),
                    new University("경남과학기술대학교", "gntech.ac.kr"),
                    new University("경남대학교", "hanma.kr"),
                    new University("경동대학교", "k1.ac.kr"),
                    new University("경북대학교", "knu.ac.kr"),
                    new University("경북외국어대학교", "kufs.ac.kr"),
                    new University("경상대학교", "gnu.ac.kr"),
                    new University("경성대학교", "ks.ac.kr"),
                    new University("경운대학교", "ikw.ac.kr"),
                    new University("경운대학교(산업대)", "ikw.ac.kr"),
                    new University("경인교육대학교", "ginue.ac.kr"),
                    new University("경일대학교", "kiu.kr"),
                    new University("경주대학교", "gju.ac.kr"),
                    new University("경희대학교", "khu.ac.kr"),
                    new University("경희사이버대학교", "khcu.ac.kr"),
                    new University("계명대학교", "kmu.ac.kr"),
                    new University("고려대학교", "korea.ac.kr"),
                    new University("고려대학교(세종)", "korea.ac.kr"),
                    new University("고려사이버대학교", "cuk.edu"),
                    new University("고신대학교", "kosin.ac.kr"),
                    new University("공주교육대학교", "gjue.ac.kr"),
                    new University("공주대학교", "smail.kongju.ac.kr"),
                    new University("가톨릭관동대학교", "cku.ac.kr"),
                    new University("광신대학교", "kwangshin.ac.kr"),
                    new University("광운대학교", "kw.ac.kr"),
                    new University("광주가톨릭대학교", "kjcatholic.ac.kr"),
                    new University("GIST", "gist.ac.kr"),
                    new University("광주교육대학교", "gnue.ac.kr"),
                    new University("광주대학교", "gwangju.ac.kr"),
                    new University("광주대학교(산업대)", "gwangju.ac.kr"),
                    new University("광주여자대학교", "kwu.ac.kr"),
                    new University("국민대학교", "kookmin.ac.kr"),
                    new University("국제사이버대학교", "gcu.ac"),
                    new University("군산대학교", "kunsan.ac.kr"),
                    new University("그리스도대학교", "kcu.ac.kr"),
                    new University("극동대학교", "kdu.ac.kr"),
                    new University("글로벌사이버대학교", "global.ac.kr"),
                    new University("금강대학교", "ggu.ac.kr"),
                    new University("금오공과대학교", "kumoh.ac.kr"),
                    new University("김천대학교", "gimcheon.ac.kr"),
                    new University("꽃동네대학교", "kkot.ac.kr"),
                    new University("나사렛대학교", "kornu.ac.kr"),
                    new University("남부대학교", "nambu.ac.kr"),
                    new University("남서울대학교", "nsu.ac.kr"),
                    new University("남서울대학교(산업대)", "nsu.ac.kr"),
                    new University("단국대학교", "dankook.ac.kr"),
                    new University("대구가톨릭대학교", "cu.ac.kr"),
                    new University("DGIST", "dgist.ac.kr"),
                    new University("대구교육대학교", "dnue.ac.kr"),
                    new University("대구대학교", "daegu.ac.kr"),
                    new University("대구사이버대학교", "dcu.ac.kr"),
                    new University("대구예술대학교", "dgau.ac.kr"),
                    new University("대구외국어대학교", "dufs.ac.kr"),
                    new University("대구한의대학교", "dhu.ac.kr"),
                    new University("대신대학교", "daeshin.ac.kr"),
                    new University("대전가톨릭대학교", "dcatholic.ac.kr"),
                    new University("대전대학교", "edu.dju.ac.kr"),
                    new University("대전신학교", "daejeon.ac.kr"),
                    new University("대전신학대학교", "daejeon.ac.kr"),
                    new University("대진대학교", "daejin.ac.kr"),
                    new University("덕성여자대학교", "duksung.ac.kr"),
                    new University("동국대학교", "dongguk.edu"),
                    new University("동국대학교(경주)", "dongguk.ac.kr"),
                    new University("동덕여자대학교", "dongduk.ac.kr"),
                    new University("동명대학교", "tu.ac.kr"),
                    new University("동명정보대학교", "tu.ac.kr"),
                    new University("동서대학교", "dongseo.ac.kr"),
                    new University("동신대학교", "dsu.kr"),
                    new University("동아대학교", "donga.ac.kr"),
                    new University("동양대학교", "dyu.ac.kr"),
                    new University("동의대학교", "deu.ac.kr"),
                    new University("디지털서울문화예술대학교", "scau.ac.kr"),
                    new University("루터대학교", "ltu.ac.kr"),
                    new University("명지대학교", "mju.ac.kr"),
                    new University("목원대학교", "mokwon.ac.kr"),
                    new University("목포가톨릭대학교", "mcu.ac.kr"),
                    new University("목포대학교", "mokpo.ac.kr"),
                    new University("목포해양대학교", "mmu.ac.kr"),
                    new University("배재대학교", "pcu.ac.kr"),
                    new University("백석대학교", "bu.ac.kr"),
                    new University("부경대학교", "pukyong.ac.kr"),
                    new University("부산가톨릭대학교", "cup.ac.kr"),
                    new University("부산교육대학교", "bnue.ac.kr"),
                    new University("부산대학교", "pusan.ac.kr"),
                    new University("부산디지털대학교", "bdu.ac.kr"),
                    new University("부산외국어대학교", "bufs.ac.kr"),
                    new University("부산장신대학교", "bpu.ac.kr"),
                    new University("사이버한국외국어대학교", "cufs.ac.kr"),
                    new University("삼육대학교", "syuin.ac.kr"),
                    new University("상명대학교", "sangmyung.kr"),
                    new University("상명대학교(천안)", "sangmyung.kr"),
                    new University("상주대학교", "knu.ac.kr"),
                    new University("상지대학교", "sangji.ac.kr"),
                    new University("서강대학교", "sogang.ac.kr"),
                    new University("서경대학교", "skuniv.ac.kr"),
                    new University("서남대학교", "seonam.ac.kr"),
                    new University("서울과학기술대학교", "seoultech.ac.kr"),
                    new University("서울과학기술대학교(산업대)", "seoultech.ac.kr"),
                    new University("서울교육대학교", "snue.ac.kr"),
                    new University("서울기독대학교", "scu.ac.kr"),
                    new University("서울대학교", "snu.ac.kr"),
                    new University("서울디지털대학교", "sdu.ac.kr"),
                    new University("서울사이버대학교", "iscu.ac.kr"),
                    new University("서울시립대학교", "uos.ac.kr"),
                    new University("서울신학대학교", "stu.ac.kr"),
                    new University("서울여자대학교", "swu.ac.kr"),
                    new University("서울장신대학교", "sjs.ac.kr"),
                    new University("서원대학교", "seowon.ac.kr"),
                    new University("선문대학교", "sunmoon.ac.kr"),
                    new University("성결대학교", "sungkyul.ac.kr"),
                    new University("성공회대학교", "skhu.ac.kr"),
                    new University("성균관대학교", "skku.edu"),
                    new University("성신여자대학교", "sungshin.ac.kr"),
                    new University("세명대학교", "semyung.ac.kr"),
                    new University("세종대학교", "sju.ac.kr"),
                    new University("세종사이버대학교", "sjcu.ac.kr"),
                    new University("세한대학교", "sehan.ac.kr"),
                    new University("송원대학교", "songwon.ac.kr"),
                    new University("수원가톨릭대학교", "suwoncatholic.ac.kr"),
                    new University("수원대학교", "suwon.ac.kr"),
                    new University("숙명여자대학교", "sookmyung.ac.kr"),
                    new University("순복음총회신학교", "kcc.ac.kr"),
                    new University("순천대학교", "scnu.ac.kr"),
                    new University("순천향대학교", "sch.ac.kr"),
                    new University("숭실대학교", "soongsil.ac.kr"),
                    new University("숭실사이버대학교", "kcu.ac"),
                    new University("신경대학교", "sgu.ac.kr"),
                    new University("신라대학교", "silla.ac.kr"),
                    new University("아세아연합신학대학교", "acts.ac.kr"),
                    new University("아주대학교", "ajou.ac.kr"),
                    new University("안동대학교", "anu.ac.kr"),
                    new University("안양대학교", "ayum.anyang.ac.kr"),
                    new University("연세대학교", "yonsei.ac.kr"),
                    new University("연세대학교(원주)", "yonsei.ac.kr"),
                    new University("열린사이버대학교", "ocu.ac.kr"),
                    new University("영남대학교", "ynu.ac.kr"),
                    new University("영남신학대학교", "ytus.ac.kr"),
                    new University("유원대학교", "u1.ac.kr"),
                    new University("영산대학교", "ysu.ac.kr"),
                    new University("영산대학교(산업대)", "ysu.ac.kr"),
                    new University("영산선학대학교", "youngsan.ac.kr"),
                    new University("예수대학교", "jesus.ac.kr"),
                    new University("예원예술대학교", "yewon.ac.kr"),
                    new University("용인대학교", "yiu.ac.kr"),
                    new University("우석대학교", "woosuk.ac.kr"),
                    new University("우송대학교", "wsu.ac.kr"),
                    new University("우송대학교(산업대)", "wsu.ac.kr"),
                    new University("UNIST", "unist.ac.kr"),
                    new University("울산대학교", "ulsan.ac.kr"),
                    new University("원광대학교", "wonkwang.ac.kr"),
                    new University("원광디지털대학교", "wdu.ac.kr"),
                    new University("위덕대학교", "uu.ac.kr"),
                    new University("을지대학교", "eulji.ac.kr"),
                    new University("이화여자대학교", "ewhain.net"),
                    new University("인제대학교", "inje.ac.kr"),
                    new University("인천가톨릭대학교", "iccu.ac.kr"),
                    new University("인천대학교", "inu.ac.kr"),
                    new University("인하대학교", "inha.edu"),
                    new University("장로회신학대학교", "pcts.ac.kr"),
                    new University("전남대학교", "jnu.ac.kr"),
                    new University("전북대학교", "jbnu.ac.kr"),
                    new University("전주교육대학교", "jnue.kr"),
                    new University("전주대학교", "jj.ac.kr"),
                    new University("정석대학", "jit.ac.kr"),
                    new University("제주교육대학교", "jejue.ac.kr"),
                    new University("제주국제대학교", "jeju.ac.kr"),
                    new University("제주대학교", "jejunu.ac.kr"),
                    new University("조선대학교", "chosun.kr"),
                    new University("중부대학교", "jmail.ac.kr"),
                    new University("중앙대학교", "cau.ac.kr"),
                    new University("중앙대학교(안성)", "cau.ac.kr"),
                    new University("중앙승가대학교", "sangha.ac.kr"),
                    new University("중원대학교", "jwu.ac.kr"),
                    new University("진주교육대학교", "cue.ac.kr"),
                    new University("진주산업대학교(산업대)", "gntech.ac.kr"),
                    new University("차의과학대학교", "cha.ac.kr"),
                    new University("창신대학교", "cs.ac.kr"),
                    new University("창원대학교", "changwon.ac.kr"),
                    new University("청운대학교", "chungwoon.ac.kr"),
                    new University("청주교육대학교", "cje.ac.kr"),
                    new University("청주대학교", "cju.ac.kr"),
                    new University("초당대학교", "chodang.ac.kr"),
                    new University("초당대학교(산업대)", "chodang.ac.kr"),
                    new University("총신대학교", "chongshin.ac.kr"),
                    new University("추계예술대학교", "chugye.ac.kr"),
                    new University("춘천교육대학교", "cnue.ac.kr"),
                    new University("충남대학교", "cnu.ac.kr"),
                    new University("충북대학교", "chungbuk.ac.kr"),
                    new University("침례신학대학교", "kbtus.ac.kr"),
                    new University("칼빈대학교", "calvin.ac.kr"),
                    new University("탐라대학교", "tnu.ac.kr"),
                    new University("평택대학교", "ptu.ac.kr"),
                    new University("POSTECH", "postech.ac.kr"),
                    new University("한경대학교", "hknu.ac.kr"),
                    new University("한경대학교(산업대)", "hknu.ac.kr"),
                    new University("KAIST", "kaist.ac.kr"),
                    new University("한국교원대학교", "knue.ac.kr"),
                    new University("한국교통대학교", "ut.ac.kr"),
                    new University("한국교통대학교(산업대)", "ut.ac.kr"),
                    new University("한국국제대학교", "iuk.ac.kr"),
                    new University("한국기술교육대학교", "koreatech.ac.kr"),
                    new University("한국방송통신대학교", "knou.ac.kr"),
                    new University("한국산업기술대학교", "kpu.ac.kr"),
                    new University("한국산업기술대학교(산업대)", "kpu.ac.kr"),
                    new University("한국성서대학교", "bible.ac.kr"),
                    new University("한국예술종합학교", "karts.ac.kr"),
                    new University("한국외국어대학교", "hufs.ac.kr"),
                    new University("한국전통문화대학교", "nuch.ac.kr"),
                    new University("한국체육대학교", "knsu.ac.kr"),
                    new University("한국항공대학교", "kau.kr"),
                    new University("한국해양대학교", "kmou.ac.kr"),
                    new University("한남대학교", "hannam.ac.kr"),
                    new University("한동대학교", "handong.edu"),
                    new University("한라대학교", "halla.ac.kr"),
                    new University("한려대학교", "hanlyo.ac.kr"),
                    new University("한려대학교(산업대)", "hanlyo.ac.kr"),
                    new University("한림대학교", "hallym.ac.kr"),
                    new University("한민학교", "hanmin.ac.kr"),
                    new University("한밭대학교", "hanbat.ac.kr"),
                    new University("한밭대학교(산업대)", "hanbat.ac.kr"),
                    new University("한북대학교", "hanbuk.ac.kr"),
                    new University("한서대학교", "hanseo.ac.kr"),
                    new University("한성대학교", "hansung.ac.kr"),
                    new University("한세대학교", "uohs.ac.kr"),
                    new University("한신대학교", "hs.ac.kr"),
                    new University("한양대학교", "hanyang.ac.kr"),
                    new University("한양대학교(ERICA)", "hanyang.ac.kr"),
                    new University("한양사이버대학교", "hycu.ac.kr"),
                    new University("한영신학대학교", "hytu.ac.kr"),
                    new University("한일장신대학교", "hanil.ac.kr"),
                    new University("한중대학교", "hanzhong.ac.kr"),
                    new University("협성대학교", "uhs.ac.kr"),
                    new University("호남대학교", "honam.ac.kr"),
                    new University("호남신학대학교", "htus.ac.kr"),
                    new University("호서대학교", "hoseo.edu"),
                    new University("호원대학교", "howon.ac.kr"),
                    new University("홍익대학교", "hongik.ac.kr"),
                    new University("홍익대학교(세종)", "hongik.ac.kr"),
                    new University("화신사이버대학교", "hscu.ac.kr")
            );

            universityRepository.saveAll(universities);
        }
    }
package com.bezkoder.springjwt.product.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "university")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class University {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    private String email;

    public University(String name, String email) {
        this.name = name;
        this.email = email;
    }
}
package com.bezkoder.springjwt.product.entity;

import com.bezkoder.springjwt.auth.models.User;
import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

import java.util.List;

@Entity
@Table(name = "certification_groups")
public class CertificationGroup {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Size(max = 50)
    private String forceEmail;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    @JsonBackReference
    private User user;

    @OneToMany(mappedBy = "certificationGroup", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<ProductUser> productUsers;

    public CertificationGroup() {
    }

    public CertificationGroup(String forceEmail, User user) {
        this.forceEmail = forceEmail;
        this.user = user;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getForceEmail() {
        return forceEmail;
    }

    public void setForceEmail(String forceEmail) {
        this.forceEmail = forceEmail;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public List<ProductUser> getProductUsers() {
        return productUsers;
    }

    public void setProductUsers(List<ProductUser> productUsers) {
        this.productUsers = productUsers;
    }
}
package com.bezkoder.springjwt.product.entity;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;

import java.util.UUID;

@Entity
@Table(name = "product_user")
public class ProductUser {
    @Id
    private String id;

    private String email;

    private boolean verified = false;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "certification_group_id")
    @JsonBackReference
    private CertificationGroup certificationGroup;

    @PrePersist
    protected void onCreate() {
        if (this.id == null) {
            this.id = UUID.randomUUID().toString();
        }
    }

    public ProductUser() {
    }

    public ProductUser(String id, String email, boolean verified, CertificationGroup certificationGroup) {
        this.id = id;
        this.email = email;
        this.verified = verified;
        this.certificationGroup = certificationGroup;
    }

    // Getters and Setters

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public boolean isVerified() {
        return verified;
    }

    public void setVerified(boolean verified) {
        this.verified = verified;
    }

    public CertificationGroup getCertificationGroup() {
        return certificationGroup;
    }

    public void setCertificationGroup(CertificationGroup certificationGroup) {
        this.certificationGroup = certificationGroup;
    }
}
package com.bezkoder.springjwt.product.controller;


import com.bezkoder.springjwt.product.dto.ProductUserResponse;
import com.bezkoder.springjwt.product.entity.ProductUser;
import com.bezkoder.springjwt.product.repository.ProductUserRepository;
import lombok.RequiredArgsConstructor;
import org.aspectj.lang.annotation.RequiredTypes;
import org.springframework.data.repository.query.Param;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RequestMapping("/product-user")
@RequiredArgsConstructor
@RestController
@CrossOrigin(origins = "*", maxAge = 3600)
public class ProductUserController {

    private final ProductUserRepository productUserRepository;


    @GetMapping("/verify/product/{productUserId}")
    public ProductUserResponse verify(@PathVariable String productUserId) {

        Optional<ProductUser> productUser = productUserRepository.findById(productUserId);

        if (productUser.isPresent()) {
            ProductUser productUserData = productUser.get();
            productUserData.setVerified(true);

            productUserRepository.save(productUserData);

            return new ProductUserResponse(productUserData.getEmail(), true, true);
        } else {
            return new ProductUserResponse(null, false, false);
        }
    }


    @GetMapping("/check/product/{productUserId}")
    public ProductUserResponse checkVerified(@PathVariable String productUserId) {
        Optional<ProductUser> productUser = productUserRepository.findById(productUserId);

        if (productUser.isPresent()) {
            ProductUser user = productUser.get();
            return new ProductUserResponse(user.getEmail(), user.isVerified(),true);
        } else {
            return new ProductUserResponse("", false,false);
        }
    }

}
package com.bezkoder.springjwt.product.controller;

import com.bezkoder.springjwt.product.dto.CertificationGroupRequest;
import com.bezkoder.springjwt.product.dto.ProductUserRequest;
import com.bezkoder.springjwt.product.entity.CertificationGroup;
import com.bezkoder.springjwt.product.entity.ProductUser;
import com.bezkoder.springjwt.product.service.CertificationGroupService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/certification-group")
@CrossOrigin(origins = "*", maxAge = 3600)
public class CertificationGroupController {

    @Autowired
    private CertificationGroupService certificationGroupService;

    @PreAuthorize("hasRole('USER')")
    @PostMapping
    public ResponseEntity<?> createCertificationGroup(@RequestBody CertificationGroupRequest request) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String username = authentication.getName();
            CertificationGroup group = certificationGroupService.createCertificationGroup(username, request);
            return ResponseEntity.ok(group);
        } catch (DataIntegrityViolationException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Force email already exists");
        }
    }

    @PreAuthorize("hasRole('USER')")
    @PostMapping("/{groupId}/product-user")
    public ResponseEntity<?> createProductUser(@PathVariable Long groupId, @RequestBody ProductUserRequest request) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String username = authentication.getName();
            ProductUser user = certificationGroupService.createProductUser(username, groupId, request);
            return ResponseEntity.ok(user);
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        }
    }

    @PreAuthorize("hasRole('USER')")
    @GetMapping("/{groupId}/product-users")
    public ResponseEntity<?> getAllProductUsers(@PathVariable Long groupId) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String username = authentication.getName();
            List<ProductUser> users = certificationGroupService.getAllProductUsers(username, groupId);
            return ResponseEntity.ok(users);
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        }
    }

    @PreAuthorize("hasRole('USER')")
    @GetMapping("/user-groups")
    public ResponseEntity<?> getCertificationGroupsByUser() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String username = authentication.getName();
            List<CertificationGroup> groups = certificationGroupService.getCertificationGroupsByUsername(username);
            return ResponseEntity.ok(groups);
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        }
    }


}
package com.bezkoder.springjwt.product.controller;

import com.bezkoder.springjwt.product.entity.University;
import com.bezkoder.springjwt.product.repository.UniversityRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;


@RestController
@RequestMapping("/api/universities")
public class UniversityController {

    @Autowired
    private UniversityRepository universityRepository;

    @GetMapping("/all")
    public ResponseEntity<List<University>> getAllUniversities() {
        List<University> universities = universityRepository.findAll();
        return ResponseEntity.ok(universities);
    }

    @GetMapping("/search")
    public ResponseEntity<List<University>> searchUniversitiesByName(@RequestParam String name) {
        List<University> universities = universityRepository.findByNameContainingIgnoreCase(name);
        return ResponseEntity.ok().body(universities);
    }
}
package com.bezkoder.springjwt.product.controller;

import com.bezkoder.springjwt.product.service.EmailService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/email")
@CrossOrigin(origins = "*", maxAge = 3600)
public class EmailController {

    @Autowired
    private EmailService emailService;

    @PostMapping("/send")
    public String sendEmail(@RequestParam String to, @RequestParam String subject, @RequestParam String text) {
        emailService.sendEmail(to, subject, text);
        return "Email sent successfully";
    }
}
package com.bezkoder.springjwt.product.service;

import com.bezkoder.springjwt.auth.models.User;
import com.bezkoder.springjwt.auth.repository.UserRepository;
import com.bezkoder.springjwt.product.dto.CertificationGroupRequest;
import com.bezkoder.springjwt.product.dto.ProductUserRequest;
import com.bezkoder.springjwt.product.entity.CertificationGroup;
import com.bezkoder.springjwt.product.entity.ProductUser;
import com.bezkoder.springjwt.product.repository.CertificationGroupRepository;
import com.bezkoder.springjwt.product.repository.ProductUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class CertificationGroupService {

    @Autowired
    private CertificationGroupRepository certificationGroupRepository;

    @Autowired
    private ProductUserRepository productUserRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EmailService emailService;

    private static final String VERIFY_URL_TEMPLATE = "http://univberry.site/verify/%s";

    @Transactional
    public CertificationGroup createCertificationGroup(String username, CertificationGroupRequest request) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        if (certificationGroupRepository.existsByUser_UsernameAndForceEmail(username, request.getForceEmail())) {
            throw new DataIntegrityViolationException("Force email already exists");
        }

        CertificationGroup group = new CertificationGroup();
        group.setForceEmail(request.getForceEmail());
        group.setUser(user);
        return certificationGroupRepository.save(group);
    }

    @Transactional
    public ProductUser createProductUser(String username, Long groupId, ProductUserRequest request) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        CertificationGroup group = certificationGroupRepository.findByIdAndUserId(groupId, user.getId())
                .orElseThrow(() -> new RuntimeException("Certification Group not found"));

        ProductUser productUser = new ProductUser();
        productUser.setEmail(request.getEmail().replaceAll("@.*", "")+group.getForceEmail());
        productUser.setVerified(false);
        productUser.setCertificationGroup(group);

        productUser = productUserRepository.save(productUser);

        // 이메일 전송
        sendVerificationEmail(productUser);

        return productUser;
    }

    private void sendVerificationEmail(ProductUser productUser) {
        try {
            String verifyUrl = String.format(VERIFY_URL_TEMPLATE, productUser.getId());
            String subject = "Verify your email";
            String text = String.format("Dear User,\n\nPlease verify your email by clicking the link below:\n\n%s\n\nBest Regards,\nTeam", verifyUrl);

            emailService.sendEmail(productUser.getEmail(), subject, text);
            System.out.println("Verification email sent to " + productUser.getEmail());
        } catch (Exception e) {
            System.out.println("Failed to send verification email to " + productUser.getEmail());
            e.printStackTrace();
        }
    }

    @Transactional(readOnly = true)
    public List<ProductUser> getAllProductUsers(String username, Long groupId) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        CertificationGroup group = certificationGroupRepository.findByIdAndUserId(groupId, user.getId())
                .orElseThrow(() -> new RuntimeException("Group not found"));

        return group.getProductUsers();
    }

    @Transactional(readOnly = true)
    public List<CertificationGroup> getCertificationGroupsByUsername(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        return certificationGroupRepository.findByUserId(user.getId());
    }

    @Transactional(readOnly = true)
    public List<ProductUser> getProductUsersByGroupId(Long groupId, String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        CertificationGroup group = certificationGroupRepository.findByIdAndUserId(groupId, user.getId())
                .orElseThrow(() -> new RuntimeException("Certification Group not found"));

        return group.getProductUsers();
    }
}
package com.bezkoder.springjwt.product.service;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
public class EmailService {

    @Autowired
    private JavaMailSender mailSender;

    public void sendEmail(String to, String subject, String text) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject(subject);
        message.setText(text);
        mailSender.send(message);
    }
}

package com.bezkoder.springjwt;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBootSecurityJwtApplication {

	public static void main(String[] args) {
    SpringApplication.run(SpringBootSecurityJwtApplication.class, args);
	}

}
